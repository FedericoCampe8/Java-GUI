#include "bundle_constraint.h"
#include "globals.h"
#include "constraint_store.h"
#include "fragment.h"
#include "logic_variables.h"
#include "mathematics.h"
#include "protein.h"
#include "trailstack.h"
#include "utilities.h"
#include "variable_fragment.h"
#include "variable_point.h"
#include "statistics.h"

#include <string>
#include <cassert>

using namespace std;
  
BundleConstraint::BundleConstraint(std::vector<VariableFragment*> vf_ptr ) 
{
  weight = 2;
  for (int i=0; i< vf_ptr.size(); i++) {
    vfrag.push_back (vf_ptr[ i ]);
  }
  
  this->add_dependencies ();
  g_constraints.push_back (this);

  ///#ifdef VERBOSE
  std::cout << "BUNDLE constraint (c_" << get_id() 
	    << ") created : ( ";
  for (int i = 0; i < vfrag.size(); i++)
    std::cout << "Var-Frag_" << vfrag[i]->get_idx() << ", ";  
  std::cout << std::endl;
  //#endif

}//-


bool 
BundleConstraint::consistency()
{
  return true;
}//-


// Assume we have two fragments in the bundle: f1, f2.
// If f1 is ground, we retireve the label of f1, and 
// the link information, from f1, that points to the label
// of the element of the fragment var domain of f2.
// with this information we can propagate,
// assume to work on pairs, and that v[0] is the bundle
bool
BundleConstraint::propagate (int trailtop) {
  string dbg = "ConstraintBundle::propagate() - ";
  //  std::cout << dbg << "Propagating Boundle constraint\n";
  
  // check propagation conditions
  if (!vfrag[ 0 ]->is_ground()) {
    return true;
  }
  // set continuation for backtraking on bundles
  g_trailstack.set_continuation();

  // HACK! mix the order later
  Fragment* f_g  = &vfrag[ 0 ]->domain[ 0 ];    // f ground
  assert( f_g->get_type() == special );
  for( int i=1; i < vfrag.size(); i++ ) {
    Fragment f_ng = vfrag[ i ]->domain[ 0 ]; // (vfrag[1]->domain[bundle_info.second]);
    
    // propagate second fragment of the pair
    f_ng.transform (f_g->rot_m, f_g->shift_v);
    
    for (uint i=0; i < f_ng.backbone_len(); i++) 
    {
      // skip last N atom of last fragment mapping
      if (i+f_ng.get_bb_s() >= g_target.get_bblen())
	break;
       
      VariablePoint* p = &(g_logicvars->var_point_list[i + f_ng.get_bb_s()]);

      // Set the point variable to ground
      if (!p->is_ground()) {
	real ol[3],oh[3];
	memcpy(ol, p->lower_bound, sizeof(point));
	memcpy(oh, p->upper_bound, sizeof(point));
	
	/* Set bounds for the first three points of f2 */
	if (i < 3) {
	  point u, l;
	  real epsilon;
	  switch (i) {
	  case 0:
	    epsilon = (cC + cO + cN)*4; // C'
	    break;
	  case 1:
	    epsilon = (cO + cN)*3; // O
	    break;
	  case 2:
	    epsilon = cN*2; // N
	    break;    
	  default:
	    epsilon = (3-i)*0.8;
	    break;
	  }//switch
	  
	  epsilon /= 100;
	  Math::vadd(f_ng.backbone[i].position, epsilon, u);
	  Math::vsub(f_ng.backbone[i].position, epsilon, l);
	  p->intersect_box (l, u);
	}
	else {
	  p->set_ground(f_ng.backbone[i]);
	  p->set_last_trailed (trailtop); // save current-state
	}
      
	p->in_var_fragment(f_ng.get_id());
	
	if (p->is_changed()) {
	  g_constraintstore.upd_changed(p);
	  g_trailstack.trail_variable_point (p, ol, oh, trailtop);
	}
	
	if (p->is_failed()) {
	  g_statistics->incr_propagation_failures(__c_bundle);
	  return false;
	}
	// std::cout << dbg << "Propagating point "; p->dump();
      }   
    }//- all points in the backbone of this fragment
  
    vfrag[ i ]->test_ground();
    vfrag[ i ]->set_last_trailed (trailtop); // save current-state
    g_constraintstore.upd_changed(vfrag[ i ]);
  
  }//- all fragments in the boundle
  g_statistics->incr_propagation_successes(__c_bundle);
  
  return true;  
}//-


void 
BundleConstraint::dump(bool all) {
  std::cout << "Bundle Constraint (w_" << get_weight()  << ")";
  if (all) {
    for (uint i=0; i<vfrag.size(); i++)
      cout << " vF_" << vfrag.at(i)->get_idx();
    cout << "\n           Vars:";
    for (uint i=0; i<vpt.size(); i++)
      cout << " vPt_" << vpt.at(i)->idx();
  }
  cout << endl;
}//-
